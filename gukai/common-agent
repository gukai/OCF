#!/bin/sh
# Common Agent use upstream script to manage the projram.
# writen by Mars Gu.
# TODO: add extra_para parameter for {start,stop,monitor}
# TODO: use the variable for debug info.

#######################################################################
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs
#######################################################################
meta_data() {
        cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="common project" version="0.1">
<version>0.1</version>

<longdesc lang="en">
This Resource Agent is the common agent use the upstream script to manage the project.
It assumes that the OS use the upstream, if you use fedora>14, centos/rhel >=7, ubuntu, it would not work.
</longdesc>
<shortdesc lang="en">Common Agent for upstream</shortdesc>

<parameters>
<parameter name="pro_name" unique="1" required="1">
<longdesc lang="en">
The Project Name in upstream.
</longdesc>
<shortdesc lang="en">Project Name</shortdesc>
<content type="string" default="" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="30" />
<action name="stop"         timeout="30" />
<action name="monitor"      timeout="20" interval="10"/>
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="30" />
</actions>
</resource-agent>
END
}

#######################################################################

pro_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}
END
}

pro_start() {
    pro_status
    status=$?
    if [ $status -eq $OCF_SUCCESS ]; then
	ocf_log debug "${OCF_RESKEY_pro_name}	already started."
	return $OCF_SUCCESS
    fi

    /etc/init.d/${OCF_RESKEY_pro_name} start >/dev/null 2>&1
    ret=$?
    if [ $ret -eq 0 ]; then
	ocf_log info "started ${OCF_RESKEY_pro_name} successed."
	return $OCF_SUCCESS
    else
        return $OCF_ERR_GENERIC
	ocf_log error "start ${OCF_RESKEY_pro_name} failed."
    fi
}


pro_stop() {
    pro_status
    status=$?
    case $status in
	$OCF_SUCCESS)
            /etc/init.d/${OCF_RESKEY_pro_name} stop >/dev/null 2>&1  
            if [ $? -eq 0 ]; then
		ocf_log info "stop ${OCF_RESKEY_pro_name} successed"
		return $OCF_SUCCESS
	    else
		ocf_log error "stop ${OCF_RESKEY_pro_name} failed."
                return $OCF_ERR_GENERIC
	    fi
	    ;;
	$OCF_NOT_RUNNING)
	    ocf_log debug "${OCF_RESKEY_pro_name} already stopped."
	    return $OCF_SUCCESS
	    ;;
    esac
    return $OCF_ERR_GENERIC
}

pro_status() {
    /etc/init.d/${OCF_RESKEY_pro_name} status > /dev/null 2>&1
    if [ $? -eq 0 ]; then
	return $OCF_SUCCESS
    else
        return $OCF_NOT_RUNNING
    fi
}


case $__OCF_ACTION in
meta-data)	meta_data
		# OCF variables are not set when querying meta-data
		exit 0
		;;
usage|help)	pro_usage
		exit $OCF_SUCCESS
		;;
start)		pro_start;;
stop)		pro_stop;;
status)	        pro_status;;
monitor)	pro_monitor;;
reload)		ocf_log info "Reloading..."
                pro_stop
	        pro_start
		;;
validate-all)	;;
*)		pro_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION returned $rc"
exit $rc
